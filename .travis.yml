language: cpp
sudo: false

install:
  # Pip cannot install Conan without these upgrades
  - python3 -m pip install --upgrade pip setuptools
  # Install Conan and CMake >= 3.15
  - python3 -m pip install conan cmake
  - yes | gem install travis
  - yes | travis login --pro
  - yes | travis encrypt --pro "868775131add7bcb068d9bdd1eeb2a1202003fa6"
  # Fail if we can't run Conan.
  - conan --version

addons:
  sonarcloud:
    organization: "kimwonjin97"
    token:
      secure: "868775131add7bcb068d9bdd1eeb2a1202003fa6" # encrypted value of your token
  homebrew:
    packages: lcov

jobs:
  include:
    - os: osx
      compiler: clang
      osx_image: xcode11.2
      env:
        - MATRIX_EVAL=""

before_script:
  - eval "${MATRIX_EVAL}"

script:
  - NUMBER_OF_PROCESSORS=$(nproc --all)
  - mkdir build
  - cmake -S . -B ./build -D ENABLE_COVERAGE:BOOL=ON ../
  # Wraps the compilation with the Build Wrapper to generate configuration (used
  # later by the SonarScanner) into the "bw-output" folder
  - build-wrapper-macosx-x86 --out-dir build_wrapper_output_folder cmake --build ./build -- -j2
  - cd build && ctest -j2
  # And finally run the SonarCloud analysis - read the "sonar-project.properties-project.properties"
  # file to see the specific configuration
  - sonar-scanner --define sonar.cfamily.cache.enabled=true --define sonar.cfamily.cache.path=${TRAVIS_HOME}/.cfamily --define sonar.cfamily.threads=${NUMBER_OF_PROCESSORS} --define sonar.cfamily.build-wrapper-output=build_wrapper_output_folder

cache:
  directories:
    - $HOME/.sonar/cache
    # This contains the CFamily cache. According to https://docs.travis-ci.com/user/caching/#pull-request-builds-and-caches,
    # for a PR, it will use the cache of the target branch if the branch of the PR does not already have its cache.
    - $HOME/.cfamily

after_success:
  # Create lcov report
  # capture coverage info
  - lcov --directory . --capture --output-file coverage.info
  # filter out system and extra files.
  # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
  - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
  # output coverage data for debugging (optional)
  - lcov --list coverage.info
  # Uploading to CodeCov
  # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"




